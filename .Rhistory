ylab = "Frequency"
)
abline (v = mean_steps,
col = "blue",
lwd = 7
)
abline (v = median_steps,
col = "red",
lty = 1,
lwd = 2
)
legend (15000,
20,
c ( "mean",
"median"),
col = c("blue",
"red"),
lty=1,
lwd = 2
)
dev.copy (png,
file.path(img_path, "image1.png"),
width = 640,
height = 520,
units = "px"
)
dev.off ()
# What is the average dailiy activity pattern?
## Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
## and the average number of steps taken, averaged across all days (y-axis)
### Calculate the average number of steps taken
info_activity_noNA <- info_activity[complete.cases(info_activity),]
average_steps <- as.data.frame (tapply (info_activity_noNA$steps,
INDEX = info_activity_noNA$interval,
FUN = "mean",
na.rm = TRUE)
)
colnames (average_steps) <- "average_steps"
average_steps$interval <- rownames (average_steps)
row.names (average_steps) <- NULL
head (average_steps)
### Time series plot
plot (average_steps$interval,
average_steps$average_steps,
type = "l",
col = "darkblue",
main = "Time Series Plot",
xlab = "Interval (5-minutes)",
ylab = "Average steps accross all days"
)
## Which 5-minute interval, on average across all the days in the dataset,
## contains the maximum number of steps?
max_steps <- which.max (average_steps$average_steps)# == average_steps$average_steps
which_max_steps <- as.integer (average_steps[max_steps,"interval"])
abline (v = which_max_steps,
col = "red",
lty = 2,
lwd = 4
)
legend (900,
200,
legend = paste ("Max Steps Interval = ", which_max_steps),
col = c("red"),
lty= 1,
lwd = 4
)
dev.copy (png,
file.path(img_path, "image2.png"),
width = 640,
height = 520,
units = "px"
)
dev.off ()
# Imputing missing values
## Calculate and report the total number of missing values in the dataset
## (i.e. the total number of rows with NAs)
total_NAs <- sum (is.na (info_activity))
## Devise a strategy for filling in all of the missing values in the dataset.
## The strategy does not need to be sophisticated.
## For example, you could use the mean/median for that day,
##  or the mean for that 5-minute interval, etc.
## Create a new dataset that is equal to the original dataset
##  but with the missing data filled in.
info_activity_steps <- dcast (info_activity,
interval ~ date,
fill = 0,
value.var = "steps"
)
info_activity_steps_full <- dcast (info_activity,
interval ~ date,
fill = rowMeans (info_activity_steps, na.rm = TRUE),
value.var = "steps"
)
average_steps_mean <- as.data.frame(reshape (info_activity_steps_full,
varying = list ( names (info_activity_steps_full [2:length (names (info_activity_steps_full))])),
v.names = c ("steps"),
timevar = "date",
idvar = c ("interval"),
times = names (info_activity_steps_full) [2:length (names (info_activity_steps_full))],
direction = "long",
new.row.names = 1:dim(info_activity)[1]
))
average_steps_mean$date <- as.Date (average_steps_mean$date, "%Y-%m-%d")
## Make a histogram of the total number of steps taken each day and Calculate and report
##  the mean and median total number of steps taken per day.
## Do these values differ from the estimates from the first part of the assignment?
## What is the impact of imputing missing data on the estimates of the total daily number of steps?
steps_per_day_mean <- aggregate (steps ~ date,
FUN = sum,
data = average_steps_mean,
na.rm = TRUE
)
hist (steps_per_day_mean$steps,
breaks = 10,
col = "darkgreen",
main = "Total Number of Steps Taken each day",
xlim = c (0,
25000),
ylim = c (0 ,
20),
xlab = "Steps per day",
ylab = "Frequency"
)
mean_steps_per_day_mean <- mean (steps_per_day_mean$steps)
median_steps_per_day_mean <- median (steps_per_day_mean$steps)
abline (v = mean_steps,
col = "black",
lwd = 7
)
abline (v = median_steps,
col = "orange",
lty = 1,
lwd = 2
)
abline (v = mean_steps_per_day_mean,
col = "darkblue",
lwd = 7
)
abline (v = median_steps_per_day_mean,
col = "red",
lty = 1,
lwd = 2
)
legend (15000,
20,
c ( paste ("mean1 = ", round (mean_steps,2)),
paste ("mean2 = ", round (mean_steps_per_day_mean,2)),
"",
paste ("median1 = ", median_steps),
paste ("median2 = ", median_steps_per_day_mean)
),
col = c("black",
"darkblue",
"000",
"orange",
"red"),
lty=1,
lwd = 2
)
dev.copy (png,
file.path(img_path, "image3.png"),
width = 640,
height = 520,
units = "px"
)
dev.off ()
# Are there differences in activity patterns between weekdays and weekends?
## Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
##   indicating whether a given date is a weekday or weekend day.
size_frame <- nrow (average_steps_mean)
for (i in 1:size_frame) {
if (weekdays (average_steps_mean$date[i]) %in% c ("Saturday", "Sunday")) {
average_steps_mean$day_type[i] <- "weekend"
}
else {
average_steps_mean$day_type[i] <- "weekday"
}
}
##  Make a panel plot containing a time series plot (i.e. type = "l")
##   of the 5-minute interval (x-axis) and the average number of steps taken,
##   averaged across all weekday days or weekend days (y-axis).
## See the README file in the GitHub repository to see an example
##   of what this plot should look like using simulated data.
steps_time_series <- aggregate (steps ~ interval + day_type,
data = average_steps_mean,
FUN = mean
)
day_type_mean <- aggregate (average_steps_mean$steps,
by = list (average_steps_mean$day_type),
FUN = mean,
na.rm = TRUE
)
colnames (day_type_mean) <- c ("day_type", "mean")
weekdays_mean <- round (day_type_mean[1,2], 2)
weekend_mean <- round (day_type_mean[1,2], 2)
xyplot (steps ~ interval | day_type,
steps_time_series,
type = "l",
layout = c (1,
2
),
main = "Time Series Plot - Weekdays Vs Weekend",
xlab = "5-minutes interval",
ylab = "Average Number of Steps Taken",
)
dev.copy (png,
file.path(img_path, "image4.png"),
width = 640,
height = 520,
units = "px"
)
dev.off ()
---
title: "Peer Assessment 1"
author: "Oscar Reyes"
date: "April 10, 2015"
output:
html_document:
toc: true
number_sections: true
theme: readable
highlight: tango
fig_width: 7
fig_height: 6
fig_caption: true
css: css/styles.css
---
#Introduction
***
It is now possible to collect a large amount of data about personal movement using activity monitoring devices such as a [Fitbit], [Nike Fuelband], or [Jawbone Up]. These type of devices are part of the "quantified self" movement -- a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. But these data remain under-utilized both because the raw data are hard to obtain and there is a lack of statistical methods and software for processing and interpreting the data.
This assignment makes use of data from a personal activity monitoring device. This device collects data at 5 minute intervals through out the day. The data consists of two months of data from an anonymous individual collected during the months of October and November, 2012 and include the number of steps taken in 5 minute intervals each day.
#Data
***
The data for this assignment can be downloaded from the course web site:
- **Dataset**: [Activity monitoring data]:[52K]
The variables included in this dataset are:
- **steps**: Number of steps taking in a 5-minute interval (missing values are coded as <code class = "data">NA</code>).
- **date**: The date on which the measurement was taken in YYYY-MM-DD format.
- **interval**: Identifier for the 5-minute interval in which measurement was taken.
The dataset is stored in a comma-separated-value (CSV) file and there are a total of 17,568 observations in this dataset.
#Assignment
***
This assignment will be described in multiple parts. You will need to write a report that answers the questions detailed below. Ultimately, you will need to complete the entire assignment in a **single R markdown** document that can be processed by **knitr** and be transformed into an HTML file.
Throughout your report make sure you always include the code that you used to generate the output you present. When writing code chunks in the R markdown document, always use <code class = "data">echo = TRUE</code> so that someone else will be able to read the code. **This assignment will be evaluated via peer assessment so it is essential that your peer evaluators be able to review the code for your analysis**.
For the plotting aspects of this assignment, feel free to use any plotting system in R (i.e., base, lattice,z ggplot2)
Fork/clone the [GitHub repository created for this assignment]. You will submit this assignment by pushing your completed files into your forked repository on GitHub. The assignment submission will consist of the URL to your GitHub repository and the SHA-1 commit ID for your repository state.
NOTE: The GitHub repository also contains the dataset for the assignment so you do not have to download the data separately.
##Loading and preprocessing the data
***
Show any code that is needed to:
<p class = "question">
**1.** Load the data (i.e. <code class = "data">read.csv()</code>).
</p>
<p class = "answer">
Answer:
</p>
```{r loading_info, echo = TRUE}
# Libraries
library (ggplot2)
library (graphics)
library (knitr)
library (lattice)
library (reshape2)
## Load the info into a data.frame (info_activity)
info_activity <- read.csv (file.path (folder ,activity_csv),
header = TRUE,
colClasses = c ("numeric",
"Date",
"numeric")
)
```
<p class = "question">
**2.** Process/transform the data (if necessary) into a format suitable for your analysis.
</p>
<p class = "answer">
Answer:
</p>
```{r info_activity, echo =TRUE}
### head (info_activity)
head (info_activity)
### Structure of data.frame (info_activity) --> str (info_activity)
str (info_activity)
### Summary of data.frame (info_activity) --> summary (info_activity)
summary (info_activity)
```
##What is mean total number of steps taken per day?
***
For this part of the assignment, you can ignore the missing values in the dataset.
<p class = "question">
**1.** Make a histogram of the total number of steps taken each day.
</p>
<p class = "answer">
Answer:
</p>
```{r histogram1, echo = TRUE}
hist (steps_per_day$steps,
breaks = 10,
col = "darkgreen",
main = "Total Number of Steps Taken each day",
xlim = c (0,
25000),
ylim = c (0 ,
20),
xlab = "Steps per day",
ylab = "Frequency"
)
abline (v = mean_steps,
col = "blue",
lwd = 7
)
abline (v = median_steps,
col = "red",
lty = 1,
lwd = 2
)
legend (15000,
20,
c ( "mean",
"median"),
col = c("blue",
"red"),
lty = 1,
lwd = 2
)
```
<p class = "question">
**2.** Calculate and report the mean and median total number of steps taken per day.
</p>
<p class = "answer">
Answer:
</p>
The mean and median values are:
| Data   | Value    |
| :----- | -------: |
|<code class = "data">mean</code>  |<code class = "data">10766.19</code>|
|<code class = "data">median</code>|<code class = "data">10765</code>   |
Both data (<code class = "data">mean</code> and <code class = "data">media</code>) are shown in the graphic.
```{r mean_median, echo=TRUE}
summary (steps_per_day)
# Mean
mean_steps
# Median
median_steps
```
##What is the average daily activity pattern?
***
<p class = "question">
**1.** Make a time series plot (i.e. <code class = "data">type = "l"</code>) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis).
</p>
<p class = "answer">
Answer:
</p>
```{r time_series_plot, echo=TRUE}
### Time series plot
plot (average_steps$interval,
average_steps$average_steps,
type = "l",
col = "darkblue",
main = "Time Series Plot",
xlab = "Interval (5-minutes)",
ylab = "Average steps accross all days"
)
## Which 5-minute interval, on average across all the days in the dataset,
## contains the maximum number of steps?
abline (v = which_max_steps,
col = "red",
lty = 2,
lwd = 4
)
legend (900,
200,
legend = paste ("Max Steps Interval = ", which_max_steps),
col = c ("red"),
lty = 1,
lwd = 4
)
```
<p class = "question">
**2.** Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
</p>
<p class = "answer">
Answer:
</p>
The ***interval <code class = "data">835</code>*** contains the maximum number of steps, as is shown in the graphic.
```{r max_steps_number, echo=TRUE}
which_max_steps
```
###Imputing missing values
***
Note that there are a number of days/intervals where there are missing values (coded as <code class = "data">NA</code>). The presence of missing days may introduce bias into some calculations or summaries of the data.
<p class = "question">
**1.** Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with <code class = "data">NAs</code>).
</p>
<p class = "answer">
Answer:
</p>
The total number of missing values in the dataset are <code class = "data">2304</code>.
```{r missing_values, echo=TRUE}
total_NAs
```
<p class = "question">
**2.** Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
</p>
<p class = "answer">
Answer:
</p>
The strategy for filling in all missing values in the dataset is to use the <code class = "data">5-minutes mean</code>.
<p class = "question">
**3.** Create a new dataset that is equal to the original dataset but with the missing data filled in.
</p>
<p class = "answer">
Answer:
</p>
The new dataset is called <code class = "data">average_steps_mean</code>.
```{r missing_data_filled, echo=TRUE}
summary (average_steps_mean)
head (average_steps_mean)
```
<p class = "question">
**4.** Make a histogram of the total number of steps taken each day and Calculate and report the **mean** and **median** total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
</p>
<p class = "answer">
Answer:
</p>
Yes, values differ from the estimates from the first part, as is shown in the graphic.
| Data                               | Value                               |
| :--------------------------------- | ----------------------------------: |
|<code class = "data">mean1</code>   | <code class = "data">10766.19</code>|
|<code class = "data">mean2</code>   | <code class = "data">11278.56</code>|
|                                    |                                     |
|<code class = "data">median1</code> | <code class = "data">10765</code>   |
|<code class = "data">median2</code> | <code class = "data">11458</code>   |
```{r histogram_steps_per_day_mean, echo=TRUE}
hist (steps_per_day_mean$steps,
breaks = 10,
col = "darkgreen",
main = "Total Number of Steps Taken each day",
xlim = c (0,
25000),
ylim = c (0 ,
20),
xlab = "Steps per day",
ylab = "Frequency"
)
abline (v = mean_steps,
col = "black",
lwd = 7
)
abline (v = median_steps,
col = "orange",
lty = 1,
lwd = 2
)
abline (v = mean_steps_per_day_mean,
col = "darkblue",
lwd = 7
)
abline (v = median_steps_per_day_mean,
col = "red",
lty = 1,
lwd = 2
)
legend (15000,
20,
c ( paste ("mean1 = ", round (mean_steps,2)),
paste ("mean2 = ", round (mean_steps_per_day_mean,2)),
"",
paste ("median1 = ", median_steps),
paste ("median2 = ", median_steps_per_day_mean)
),
col = c("black",
"darkblue",
"000",
"orange",
"red"),
lty=1,
lwd = 2
)
```
##Are there differences in activity patterns between weekdays and weekends?
***
For this part the <code class = "data">weekdays()</code> function may be of some help here. Use the dataset with the filled-in missing values for this part.
<p class = "question"> **1.** Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.</p>
<p class = "answer"> Answer: </p>
```{r day_type, echo=TRUE}
summary (average_steps_mean)
```
<p class = "question"> **2.** Make a panel plot containing a time series plot (i.e. <code class = "data">type = "l"</code>) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was created using simulated data:</p>
<p class = "answer"> Answer: </p>
```{r plot_day_type, echo=TRUE}
xyplot (steps ~ interval | day_type,
steps_time_series,
type = "l",
layout = c (1,
2
),
main = "Time Series Plot - Weekdays Vs Weekend",
xlab = "5-minutes interval",
ylab = "Average Number of Steps Taken",
)
```
[Fitbit]: http://www.fitbit.com/    "Fitbit"
[Nike Fuelband]: http://www.nike.com/us/en_us/c/nikeplus-fuelband    "Nike Fuelband"
[Jawbone Up]: https://jawbone.com/up    "Jawbone Up"
[Activity monitoring data]: https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip    "Activity monitoring data"
[GitHub repository created for this assignment]:http://github.com/rdpeng/RepData_PeerAssessment1    "GitHub repository created for this assignment"
******
> **Note**: All `echo = TRUE` parameter was added to the code chunk to let someone else can read the code.
getwd()
folder
activity_csv
file.path (folder, activity_csv)
